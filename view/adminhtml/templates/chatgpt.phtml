<script>

    function chatGPT() {
        return {
            model: 'product',
            promptMap: <?php echo json_encode($this->buildPromptMap()); ?>,
            textAreaPrompt: '',
            prompt: '',
            result: '',
            open: false,
            backendUrl: <?php echo json_encode($this->getUrl('chatgpt/index/index', ['form_key' => $this->getFormKey()])) ?>,
            backendImageUrl: <?php echo json_encode($this->getUrl('chatgpt/index/image', ['form_key' => $this->getFormKey()])) ?>,
            showUploadImage: false,
            context: [],
            lastFocus: null,
            lastFocusType: 'input',
            init: function() {
                let self = this;
                require(['jquery','mage/translate'],
                    function ($) {
                        $(document).ajaxComplete(function() {
                            self.buildContext();
                            $(document.body).on('contentUpdated',function() {
                                if (document.getElementById('fileupload')) {
                                    self.showUploadImage = true;
                                } else {
                                    self.showUploadImage = false;
                                }

                            })

                            $(document).on('click',function(event) {
                                const label = $(event.target).parents('.admin__field').find('.admin__field-label label span').text();
                                if (!label) return null;
                                self.lastFocus = $(event.target);
                                self.lastFocusType = 'input';
                                self.buildPrompt(label);
                            })

                            tinymce.on('AddEditor', function(e) {
                                e.editor.on('focus', function(event) {
                                    let label = $(event.target).parents('.admin__field').find('.admin__field-label label span').text();

                                    if (e.editor.id == "product_form_short_description") {
                                        label = "Short Description";
                                    }

                                    if (!label) return null;

                                    self.lastFocus = $(event.target);
                                    self.lastFocusType = 'tinymce';
                                    self.buildPrompt(label);
                                });

                            });
                        });
                    });
            },
            buildPrompt: function(label) {
                let prompt = 'Context:\n';

                for (let i = 0; i < this.context.length; i++) {
                    prompt += '- '+ this.context[i].label+ ': '+ this.context[i].value+'\n';
                }

                prompt += '\nRequest: \n';
                let requestStr = this.promptMap[this.model][label] ?? 'Write '+label.toLowerCase()+ ' for product in context';

                requestStr = requestStr.replaceAll('%label%',label.toLowerCase())

                for (let i = 0; i < this.context.length; i++) {
                    requestStr = requestStr.replaceAll('%'+this.context[i].label.toLowerCase().replaceAll(' ','_')+'%',this.context[i].value);
                }

                prompt += requestStr;
                this.textAreaPrompt = requestStr;

                this.prompt = prompt;
            },
            buildContext: function () {
                let context = []

                context.push({
                    label: "Product Name",
                    value: jQuery('[name="product[name]"]').val()
                })

                context.push({
                    label: "Categories",
                    value: jQuery('[data-index="container_category_ids"] .admin__action-multiselect-crumb > span').map((index,el) => jQuery(el).text()).toArray().join(', ')
                });
                context.push({
                    label: "Language",
                    value: <?php echo json_encode($this->getCurrentProductLanguage()); ?>
                })

                this.context = context;
            },
            request: async function () {
                jQuery('body').trigger('processStart');
                const res = await fetch(this.backendUrl,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        prompt: this.prompt
                    })
                }).then(response => response.json()).catch(e => {
                    console.log(e);
                    jQuery('body').trigger('processStop');
                })

                this.result = res.message;
                jQuery('body').trigger('processStop');
            },
            uploadImage: async function () {
                jQuery('body').trigger('processStart');
                this.buildPrompt('Product Image');

                return fetch(this.backendImageUrl, {
                        method: "POST",
                        headers: {
                            "Content-Type": "image/jpeg",
                        },
                        body: JSON.stringify({
                            prompt: this.textAreaPrompt
                        })
                    })
                    .then(function(response) {
                        return response.blob()
                    })
                    .then(function(blob) {
                        try {
                            const myFile = new File([blob], 'image.jpg', {
                                type: 'image/jpeg',
                            });

                            let container = new DataTransfer();
                            container.items.add(myFile);

                            const uploader = document.getElementById('fileupload');

                            uploader.files = container.files;
                            jQuery(uploader).trigger('change')
                            jQuery('body').trigger('processStop');
                        } catch (e) {
                            console.log(e);
                            jQuery('body').trigger('processStop');
                        }
                    });
            },
            copyToField() {
                if (this.lastFocusType == 'tinymce') {
                    tinymce.activeEditor.setContent(this.result);
                    return;
                }
                jQuery(this.lastFocus).val(this.result)
            }
        }
     }
</script>

<div class="sticky-bar" x-data="chatGPT()"  >

    <div style="margin-bottom: 10px;">
        <strong>Context:</strong>
        <ul style="margin-left: 20px;" >
            <template x-for="_context in context" >
                <li>
                    <b x-text="_context.label" ></b>:
                    <span x-text="_context.value"></span>
                </li>
            </template>
        </ul>
    </div>

    <div class=" d-flex " style=" gap:20px; width: 100%; display: flex; flex-direction: row; justify-content: space-between; align-items: flex-start; ">
        <div class="col " style="flex-grow: 1; flex-shrink: 1;">
            <textarea id="chatgpt_prompt" class="form-control" x-model="textAreaPrompt"  ></textarea>
            <div style="margin-bottom: 10px;">
                <button class="btn btn-outline-secondary" @click="request" type="button">Request AI</button>
                <button class="btn btn-outline-secondary" x-show="showUploadImage" @click="uploadImage" type="button">Generate Product Image</button>
            </div>
        </div>

        <div class="col " style="flex-grow: 1; flex-shrink: 1;">
            <textarea id="chatgpt_message"  class="form-control" x-model="result" ></textarea>
            <div style="margin-bottom: 10px;">
                <button class="btn btn-outline-secondary" @click="copyToField" type="button">Apply To Selected Field</button>
            </div>
        </div>
    </div>

</div>
